/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.PopController;
import controller.SmtpController;
import emailclientcn.globalRecords;
import java.awt.Dialog;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import model.AccessEmailReceive;
import model.EntityEmailReceive;
import model.EntityEmailWrite;
import tools.CheckMethods;

/**
 *
 * @author maokelong
 */
public class FrameMainRebuild extends javax.swing.JFrame {

    /**
     * Creates new form FrameMainRebuild
     */
    public FrameMainRebuild() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        panel_write = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        addrs_text = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        subject_text = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btn_sendMail = new javax.swing.JButton();
        panel_box = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cbx_receivePreference = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        btn_receiveEmails = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_receiveSender = new javax.swing.JTextField();
        txt_receiveTitle = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_receiveContent = new javax.swing.JTextArea();
        btn_receiveDelete = new javax.swing.JButton();
        btn_receiveReply = new javax.swing.JButton();
        btn_receiveDev = new javax.swing.JButton();
        btn_setImportant = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EmailClientCN");

        tabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 8, 0, 8));
        tabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tabbedPane.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel1.setText("收件人地址：");

        addrs_text.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel2.setText("主题：");

        subject_text.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        jLabel3.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel3.setText("正文：");

        btn_sendMail.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        btn_sendMail.setText("发送");
        btn_sendMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendMailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_writeLayout = new javax.swing.GroupLayout(panel_write);
        panel_write.setLayout(panel_writeLayout);
        panel_writeLayout.setHorizontalGroup(
            panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_writeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .addComponent(addrs_text)
                    .addComponent(subject_text)
                    .addComponent(btn_sendMail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_writeLayout.setVerticalGroup(
            panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_writeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addrs_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(subject_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel_writeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_writeLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btn_sendMail)
                .addContainerGap())
        );

        tabbedPane.addTab("写信", panel_write);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 14, 2, 14));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "发件人", "接收日期", "标题"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        cbx_receivePreference.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "所有邮件", "要件" }));
        cbx_receivePreference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_receivePreferenceActionPerformed(evt);
            }
        });

        btn_receiveEmails.setText("收件");
        btn_receiveEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_receiveEmailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_receiveEmails, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                .addComponent(cbx_receivePreference, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbx_receivePreference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_receiveEmails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(525, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(0, 45, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("收件箱", jPanel1);

        jLabel5.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel5.setText("发信人：");

        jLabel6.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel6.setText("标题：");

        jLabel7.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel7.setText("正文：");

        txt_receiveSender.setEditable(false);
        txt_receiveSender.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        txt_receiveSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_receiveSenderActionPerformed(evt);
            }
        });

        txt_receiveTitle.setEditable(false);
        txt_receiveTitle.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        txt_receiveTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_receiveTitleActionPerformed(evt);
            }
        });

        txt_receiveContent.setEditable(false);
        txt_receiveContent.setColumns(20);
        txt_receiveContent.setLineWrap(true);
        txt_receiveContent.setRows(5);
        txt_receiveContent.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txt_receiveContent);

        btn_receiveDelete.setText("删除邮件（仅从服务器）");
        btn_receiveDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_receiveDeleteActionPerformed(evt);
            }
        });

        btn_receiveReply.setText("回复邮件");
        btn_receiveReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_receiveReplyActionPerformed(evt);
            }
        });

        btn_receiveDev.setText("转发邮件");
        btn_receiveDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_receiveDevActionPerformed(evt);
            }
        });

        btn_setImportant.setLabel("列为要件");
        btn_setImportant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_setImportantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_setImportant, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_receiveReply, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_receiveDev, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_receiveDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt_receiveSender)
                    .addComponent(txt_receiveTitle, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_receiveSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_receiveTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_receiveDelete)
                    .addComponent(btn_setImportant)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_receiveReply)
                        .addComponent(btn_receiveDev)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("察看邮件", jPanel2);

        javax.swing.GroupLayout panel_boxLayout = new javax.swing.GroupLayout(panel_box);
        panel_box.setLayout(panel_boxLayout);
        panel_boxLayout.setHorizontalGroup(
            panel_boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        panel_boxLayout.setVerticalGroup(
            panel_boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        tabbedPane.addTab("收件箱", panel_box);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_receiveSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_receiveSenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_receiveSenderActionPerformed

    private void txt_receiveTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_receiveTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_receiveTitleActionPerformed

    private void btn_receiveDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_receiveDevActionPerformed
        tabbedPane.setSelectedIndex(0);
        EntityEmailReceive emailReceive = emailReceiveAll.get(rowSelected);
        addrs_text.setText(emailReceive.getSenderAddrString());
        subject_text.setText("转发邮件:" + emailReceive.getMessageIDString());

        String contentString = ">>From: " + emailReceive.getSenderAddrString()
                + "\n>>To:" + globalRecords.getEntityUser().getEmailAddr()
                + "\n>>Title: " + emailReceive.getMailTitleString()
                + "\n>>Conent: " + emailReceive.getMailContentsString();
        textArea.setText(contentString);
    }//GEN-LAST:event_btn_receiveDevActionPerformed

    private void btn_sendMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendMailActionPerformed
        btn_sendMail.setEnabled(false);
        btn_sendMail.setText("正在发送邮件...");
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    SmtpController smtpController = new SmtpController();
                    smtpController.loginSmtpServer();
                    smtpController.Send(new EntityEmailWrite(globalRecords.getEntityUser().getEmailAddr(),
                            addrs_text.getText().toString(), subject_text.getText().toString(), textArea.getText().toString()));
                    smtpController.quitSmtpServer();
                } catch (Exception ex) {
                    Logger.getLogger(FrameMainRebuild.class.getName()).log(Level.SEVERE, null, ex);
                    CheckMethods.ShowProcess(ex.getMessage());
                    CheckMethods.ShutdownProgress();
                }
                btn_sendMail.setEnabled(Boolean.TRUE);
                btn_sendMail.setText("发送");
                addrs_text.setText("");
                subject_text.setText("");
                textArea.setText("");
            }
        }).start();
    }//GEN-LAST:event_btn_sendMailActionPerformed


    private void btn_receiveEmailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_receiveEmailsActionPerformed
        new Runnable() {
            @Override
            public void run() {
                //从服务器获取信件到数据库
                try {
                    PopController popController = new PopController();
                    popController.login2PopServer();
                    popController.getAllEmails();
                    popController.quitPop();
                    CheckMethods.ShutdownProgress();
                } catch (Exception e) {
                    CheckMethods.ShowProcess(e.getMessage());
                    CheckMethods.ShutdownProgress();
                }
                //从数据库获取信件到客户端
                try {
                    AccessEmailReceive accessEmailReceive = new AccessEmailReceive();
                    emailReceiveAll = accessEmailReceive.getEmailReceiveAll();
                    // 插入表格
                    TableModel model = new TableModel() {

                        @Override
                        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        }

                        @Override
                        public void removeTableModelListener(TableModelListener l) {
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return false;
                        }

                        @Override
                        public Object getValueAt(int rowIndex, int columnIndex) {
                            String retString;
                            switch (columnIndex) {
                                case 0:
                                    retString = emailReceiveAll.get(rowIndex).getMessageIDString();
                                    break;
                                case 1:
                                    retString = emailReceiveAll.get(rowIndex).getSenderAddrString();
                                    break;
                                case 2:
                                    retString = emailReceiveAll.get(rowIndex).getMailTitleString();
                                    break;
                                case 3:
                                    retString = emailReceiveAll.get(rowIndex).getMailDevDatesString();
                                    break;
                                default:
                                    retString = "";
                            }
                            return retString;
                        }

                        @Override
                        public int getRowCount() {
                            return emailReceiveAll.size();
                        }

                        @Override
                        public String getColumnName(int columnIndex) {
                            String retString;
                            switch (columnIndex) {
                                case 0:
                                    retString = "ID";
                                    break;
                                case 1:
                                    retString = "发件人";
                                    break;
                                case 2:
                                    retString = "主题";
                                    break;
                                case 3:
                                    retString = "时间";
                                    break;
                                default:
                                    retString = "";
                            }
                            return retString;
                        }

                        @Override
                        public int getColumnCount() {
                            return 4;
                        }

                        @Override
                        public Class<?> getColumnClass(int columnIndex) {
                            return String.class;
                        }

                        @Override
                        public void addTableModelListener(TableModelListener l) {

                        }
                    };

                    jTable1.setModel(model);
                    jTable1.setRowHeight(35);
                    jTable1.addMouseListener(new MouseAdapter() {
                        /**
                         * 鼠标点击事件
                         */
                        public void mouseClicked(MouseEvent e) {

                            if (e.getClickCount() == 2) {
                                rowSelected = ((JTable) e.getSource()).rowAtPoint(e.getPoint()); // 获得行位置
                                EntityEmailReceive entityEmailReceive = emailReceiveAll.get(rowSelected);
                                txt_receiveTitle.setText(entityEmailReceive.getMailTitleString());
                                txt_receiveSender.setText(entityEmailReceive.getSenderAddrString());

                                if (!entityEmailReceive.getAlreadyDownload()) {
                                    try {
                                        /* 获取content */
                                        PopController popController = new PopController();
                                        popController.login2PopServer();
                                        entityEmailReceive.setMailContentsString(popController.getEmailContentByMessageID(entityEmailReceive.getMessageIDString()));
                                        popController.quitPop();
                                    } catch (Exception ex) {
                                    }

                                    try {
                                        AccessEmailReceive accessEmailReceive = new AccessEmailReceive();
                                        accessEmailReceive.saveEmailReceive(entityEmailReceive, true);
                                    } catch (Exception ex) {
                                    }
                                }
                                txt_receiveContent.setText(entityEmailReceive.getMailContentsString());
                                jTabbedPane1.setSelectedIndex(1);
                            }
                        }

                    });
                } catch (Exception e) {
                    CheckMethods.ShowProcess(e.getMessage());
                }
            }
        }.run();
    }//GEN-LAST:event_btn_receiveEmailsActionPerformed

    private void btn_receiveReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_receiveReplyActionPerformed
        tabbedPane.setSelectedIndex(0);
        addrs_text.setText(emailReceiveAll.get(rowSelected).getSenderAddrString());
        subject_text.setText("回复邮件:" + emailReceiveAll.get(rowSelected).getMessageIDString());
    }//GEN-LAST:event_btn_receiveReplyActionPerformed

    private void btn_setImportantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_setImportantActionPerformed
        if (rowSelected != -1) {
            EntityEmailReceive entityEmailReceive = emailReceiveAll.get(rowSelected);
            entityEmailReceive.setMailType(1);
            try {
                AccessEmailReceive accessEmailReceive = new AccessEmailReceive();
                accessEmailReceive.saveEmailReceive(entityEmailReceive, true);
                JOptionPane.showMessageDialog(this, "已将该邮件设置为要件!");
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_btn_setImportantActionPerformed

    private void cbx_receivePreferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_receivePreferenceActionPerformed
        new Runnable() {
            @Override
            public void run() {
                //从服务器获取信件到数据库
                try {
                    PopController popController = new PopController();
                    popController.login2PopServer();
                    popController.getAllEmails();
                    popController.quitPop();
                    CheckMethods.ShutdownProgress();
                } catch (Exception e) {
                    CheckMethods.ShowProcess(e.getMessage());
                    CheckMethods.ShutdownProgress();
                }
                //从数据库获取信件到客户端
                try {
                    AccessEmailReceive accessEmailReceive = new AccessEmailReceive();
                    emailReceiveAll = accessEmailReceive.getEmailReceiveAll(cbx_receivePreference.getSelectedIndex() == 1);
                    // 插入表格
                    TableModel model = new TableModel() {

                        @Override
                        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        }

                        @Override
                        public void removeTableModelListener(TableModelListener l) {
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return false;
                        }

                        @Override
                        public Object getValueAt(int rowIndex, int columnIndex) {
                            String retString;
                            switch (columnIndex) {
                                case 0:
                                    retString = emailReceiveAll.get(rowIndex).getMessageIDString();
                                    break;
                                case 1:
                                    retString = emailReceiveAll.get(rowIndex).getSenderAddrString();
                                    break;
                                case 2:
                                    retString = emailReceiveAll.get(rowIndex).getMailTitleString();
                                    break;
                                case 3:
                                    retString = emailReceiveAll.get(rowIndex).getMailDevDatesString();
                                    break;
                                default:
                                    retString = "";
                            }
                            return retString;
                        }

                        @Override
                        public int getRowCount() {
                            return emailReceiveAll.size();
                        }

                        @Override
                        public String getColumnName(int columnIndex) {
                            String retString;
                            switch (columnIndex) {
                                case 0:
                                    retString = "ID";
                                    break;
                                case 1:
                                    retString = "发件人";
                                    break;
                                case 2:
                                    retString = "主题";
                                    break;
                                case 3:
                                    retString = "时间";
                                    break;
                                default:
                                    retString = "";
                            }
                            return retString;
                        }

                        @Override
                        public int getColumnCount() {
                            return 4;
                        }

                        @Override
                        public Class<?> getColumnClass(int columnIndex) {
                            return String.class;
                        }

                        @Override
                        public void addTableModelListener(TableModelListener l) {

                        }
                    };

                    jTable1.setModel(model);
                    jTable1.setRowHeight(35);
                    jTable1.addMouseListener(new MouseAdapter() {
                        /**
                         * 鼠标点击事件
                         */
                        public void mouseClicked(MouseEvent e) {

                            if (e.getClickCount() == 2) {
                                rowSelected = ((JTable) e.getSource()).rowAtPoint(e.getPoint()); // 获得行位置
                                EntityEmailReceive entityEmailReceive = emailReceiveAll.get(rowSelected);
                                txt_receiveTitle.setText(entityEmailReceive.getMailTitleString());
                                txt_receiveSender.setText(entityEmailReceive.getSenderAddrString());
                                if (!entityEmailReceive.getAlreadyDownload()) {
                                    try {
                                        /* 获取content */
                                        PopController popController = new PopController();
                                        popController.login2PopServer();
                                        entityEmailReceive.setMailContentsString(popController.getEmailContentByMessageID(entityEmailReceive.getMessageIDString()));
                                        popController.quitPop();
                                    } catch (Exception ex) {
                                        Logger.getLogger(FrameMainRebuild.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                    try {
                                        AccessEmailReceive accessEmailReceive = new AccessEmailReceive();
                                        accessEmailReceive.saveEmailReceive(entityEmailReceive, true);
                                    } catch (Exception ex2) {
                                    }
                                }
                                txt_receiveContent.setText(entityEmailReceive.getMailContentsString());
                                jTabbedPane1.setSelectedIndex(1);
                            }
                        }

                    });
                } catch (Exception e) {
                    CheckMethods.ShowProcess(e.getMessage());
                }
            }
        }.run();
    }//GEN-LAST:event_cbx_receivePreferenceActionPerformed

    private void btn_receiveDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_receiveDeleteActionPerformed
        try {
            EntityEmailReceive emailReceive = emailReceiveAll.get(rowSelected);
            PopController popController = new PopController();
            popController.login2PopServer();
            popController.deleteSingleEmailFromServerByMessageID(emailReceive.getMessageIDString());
            jTabbedPane1.setSelectedIndex(0);
            rowSelected = -1;
            txt_receiveContent.setText("");
            txt_receiveSender.setText("");
            txt_receiveTitle.setText("");
            jTabbedPane1.setSelectedIndex(0);
            popController.quitPop();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "邮件删除失败!" + e.getMessage());
        }
    }//GEN-LAST:event_btn_receiveDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMainRebuild.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMainRebuild.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMainRebuild.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMainRebuild.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMainRebuild().setVisible(true);
            }
        });
    }

    int rowSelected = -1;
    ArrayList<EntityEmailReceive> emailReceiveAll;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrs_text;
    private javax.swing.JButton btn_receiveDelete;
    private javax.swing.JButton btn_receiveDev;
    private javax.swing.JButton btn_receiveEmails;
    private javax.swing.JButton btn_receiveReply;
    private javax.swing.JButton btn_sendMail;
    private javax.swing.JButton btn_setImportant;
    private javax.swing.JComboBox<String> cbx_receivePreference;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panel_box;
    private javax.swing.JPanel panel_write;
    private javax.swing.JTextField subject_text;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextArea txt_receiveContent;
    private javax.swing.JTextField txt_receiveSender;
    private javax.swing.JTextField txt_receiveTitle;
    // End of variables declaration//GEN-END:variables
}
